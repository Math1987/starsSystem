function starSystem(parent){    const stars = {} ;    const TIME_ANIMATION = 2 ;    const DISTANCE = 4 ;    const NUMBER = 8 ;    const canvasStars = document.createElement("canvas");    canvasStars.style.position = "absolute" ;    canvasStars.width = parent.width ;    canvasStars.height = parent.height ;    canvasStars.style.width = `${parent.width}px` ;    canvasStars.style.height = `${ parent.height}px` ;    canvasStars.style.pointerEvents = "none" ;    canvasStars.style.zIndex = 10 ;    parent.appendChild(canvasStars);    const context = canvasStars.getContext("2d") ;    context.fillStyle = "yellow";    let lastTime = new Date().getTime() ;    let elapsed = 0 ;    const animations = [];    const interval = setInterval( ()=>{        if ( canvasStars.width !== parent.width || canvasStars.height !== parent.height ) {            canvasStars.width = parent.width;            canvasStars.height = parent.height;            canvasStars.style.width = `${parent.width}px`;            canvasStars.style.height = `${parent.height}px`;            context.fillStyle = "yellow";        }        context.clearRect(0,0, canvasStars.width, canvasStars.height);        let newTime = new Date().getTime();        elapsed = (newTime - lastTime)/1000 ;        lastTime = newTime ;        for ( let i = animations.length-1 ; i >= 0 ; i -- ){            drawAnimation(animations[i]);            if ( (newTime - animations[i].start)/1000 >= TIME_ANIMATION ){                animations.splice(i,1) ;            }        }    },10);    drawAnimation = function(animation){        console.log('draw animation star')        let ratio = Math.pow(((lastTime -animation.start)/1000)/2,0.5) ;        context.globalAlpha = 1-ratio ;        for ( let i = 0 ; i < NUMBER ; i ++ ){            let angle = i/NUMBER * (Math.PI*2) ;            drawStart(animation.x + Math.cos(angle)*animation.size*DISTANCE*ratio, animation.y + Math.sin(angle)*animation.size*DISTANCE*ratio, animation.size* (1-ratio)*0.75 );        }    };    drawStart = function(x, y, size){        const ratio = 224 ;        context.translate(x,y) ;        context.beginPath();        context.moveTo( - 130/ratio*size, 60/ratio*size );        context.lineTo( -234/ratio*size, - 55/ratio*size);        context.lineTo( -80/ratio*size, - 90/ratio*size);        context.lineTo( 0/ratio*size, - 220/ratio*size);        context.lineTo( 80/ratio*size, - 90/ratio*size);        context.lineTo( 234/ratio*size, - 55/ratio*size);        context.lineTo( 130/ratio*size, 60/ratio*size );        context.lineTo( 160/ratio*size, 224/ratio*size);        context.lineTo( 0/ratio*size, 160/ratio*size);        context.lineTo( -160/ratio*size, 224/ratio*size);        context.fill();        context.translate(-x,-y) ;    }    stars.drawStars = function(x,y,size){        animations.push({start: new Date().getTime(), x : x, y : y, size: size});    };    stars.destroy(){        clearInterval(interval);        parent.removeChild(canvasStars);    }    return stars ;}